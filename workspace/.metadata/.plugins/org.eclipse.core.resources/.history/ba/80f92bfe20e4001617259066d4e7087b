package org.ntua.tant.rest.filters;

import java.io.IOException;
import java.util.List;
import java.util.StringTokenizer;
import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ContainerRequestFilter;
import javax.ws.rs.core.Response;
import javax.ws.rs.ext.Provider;

import org.glassfish.jersey.internal.util.Base64;
import org.ntua.tant.rest.DBService.DB;
import org.ntua.tant.rest.exceptions.DataNotFoundException;
import org.ntua.tant.rest.exceptions.UnauthorizedException;
import org.ntua.tant.rest.model.User;

@Provider
public class SecurityFilter implements ContainerRequestFilter{
	
	private static final String AUTHORIZATION_HEADER_KEY = "Authorization";
	private static final String AUTHORIZATION_HEADER_PREFIX = "Basic ";
	private static final String SECURED_URL_PREFIX = "node";
	private static final String USERNAME = "user";
	private static final String PASSWORD = "password";
	
	@Override
	public void filter(ContainerRequestContext requestContext) throws IOException{
		DB db = new DB();
		String username;
		String password;
		if(requestContext.getUriInfo().getAbsolutePath().toString().contains(SECURED_URL_PREFIX)) {
			List<String> authHeader = requestContext.getHeaders().get(AUTHORIZATION_HEADER_KEY);
			if(authHeader != null && authHeader.size() > 0){
				String authToken = authHeader.get(0);
				authToken = authToken.replaceFirst(AUTHORIZATION_HEADER_PREFIX, "");
				String decodedString = Base64.decodeAsString(authToken);
				StringTokenizer tokenizer = new StringTokenizer(decodedString, ":");
				username = tokenizer.nextToken();
				password = tokenizer.nextToken();
				User user = db.getUser(username);
				if (user.getId()!=0){
					if (password.equals(user.getPassword())){
						if (requestContext.getMethod().equalsIgnoreCase("delete")&&user.getRole().equalsIgnoreCase("admin")){
							return;
						} else {
							throw new UnauthorizedException("Unauthorized user");
						}
					} else {
						throw new UnauthorizedException("Bad password");
					}
				} else {
					throw new UnauthorizedException("User with username = "+username+" does not exists");
				
				/*Response unauthorizedStatus = Response
                    	.status(Response.Status.UNAUTHORIZED)
                    	.entity("User cannot access the resource.")
                    	.build();
				requestContext.abortWith(unauthorizedStatus);*/
				}
			}
		}
	}
}

